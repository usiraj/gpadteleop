"""autogenerated by genpy from gpadteleop/GamePadLevels.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GamePadLevels(genpy.Message):
  _md5sum = "01ad1af12bf35ebd53f399db6a5f7d0e"
  _type = "gpadteleop/GamePadLevels"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 GPADLEVEL_MOTORE=1
uint32 GPADLEVEL_MOTORD=2
uint32 GPADLEVEL_PUBFREQ=4
uint32 GPADLEVEL_BTN_TGLLIN=8
uint32 GPADLEVEL_BTN_TGLANG=16
uint32 GPADLEVEL_BTN_LOCK=32
uint32 GPADLEVEL_BTN_SFTBRK=64
uint32 GPADLEVEL_BTN_HRDBRK=128
uint32 GPADLEVEL_BTN_LINMODE=256
uint32 GPADLEVEL_BTN_ANGMODE=512
uint32 GPADLEVEL_AXIS_LIN=1024
uint32 GPADLEVEL_AXIS_LINSPEED=2048
uint32 GPADLEVEL_AXIS_ANG=4096
uint32 GPADLEVEL_AXIS_ANGSPEED=8192
uint32 GPADLEVEL_MAXLIN=16384
uint32 GPADLEVEL_MAXANG=32768

"""
  # Pseudo-constants
  GPADLEVEL_MOTORE = 1
  GPADLEVEL_MOTORD = 2
  GPADLEVEL_PUBFREQ = 4
  GPADLEVEL_BTN_TGLLIN = 8
  GPADLEVEL_BTN_TGLANG = 16
  GPADLEVEL_BTN_LOCK = 32
  GPADLEVEL_BTN_SFTBRK = 64
  GPADLEVEL_BTN_HRDBRK = 128
  GPADLEVEL_BTN_LINMODE = 256
  GPADLEVEL_BTN_ANGMODE = 512
  GPADLEVEL_AXIS_LIN = 1024
  GPADLEVEL_AXIS_LINSPEED = 2048
  GPADLEVEL_AXIS_ANG = 4096
  GPADLEVEL_AXIS_ANGSPEED = 8192
  GPADLEVEL_MAXLIN = 16384
  GPADLEVEL_MAXANG = 32768

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GamePadLevels, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
